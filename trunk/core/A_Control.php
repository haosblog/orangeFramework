<?php/** * File: A_Control.php * Functionality: API Basic Controller * Author: Nic XIE * Date: 2012-2-28 * Remark: * ---------------- DO NOT MODIFY THIS FILE UNLESS YOU FULLY UNDERSTAND ! ------------------ */abstract class A_Control {	private static $obj;	/**	 * For REST API	 */ 	public $format = 'json';	protected $version = '1.0';	protected $method;	protected $signMethod = 'md5';	protected $sign;	protected $timestamp;	protected $client_id;	protected $fields = '';	function __construct() {		$this->sessionStart();		$this->client_id = getParam('app_key');		$this->version = getParam('v');		$this->format  = getParam('format');		$this->method  = getParam('method');		$this->sign  = getParam('sign');		$this->timestamp  = getParam('timestamp');		// string like 'id, username', seperated with comma		$this->fields = getParam('fields');		if (!$this->timeVerify()) {			eand(ERR_TIMEOUT);		}		$checkMd5 = $this->md5Verify();		if(!$checkMd5){			eand(ERR_SIGN);		}	}	/**	 * Load model	 * <br />After loading a model, the new instance will be added into $obj immediately,	 * <br />which is used to make sure that the same model is only loaded once per page !	 *	 * @param string => model to be loaded	 * @return new instance of $model or raiseError on failure !	 */	public static function load($model) {		$model = 'M_'.$model;		if(self::$obj[$model] && is_object(self::$obj[$model])) {			return self::$obj[$model];		}		$file = MODEL_PATH.'/'.$model.'.php';		if(file_exists($file)) {			require_once $file;		}else{			$traceInfo = debug_backtrace();			$error = 'Model '.$model.' NOT FOUND !';			Helper::raiseError($traceInfo, $error);		}		try{			self::$obj[$model] = new $model;			return self::$obj[$model];		}catch(Exception $error) {			$traceInfo = debug_backtrace();			$error = 'Load model '.$model.' FAILED !';			Helper::raiseError($traceInfo, $error);		}	}	protected function sessionStart() {		if(!session_id()) {			session_start();		}	}	private function timeVerify($delay = 60){		$time_after = CUR_TIMESTAMP + $delay;		$time_before = CUR_TIMESTAMP - $delay;		if($time_after > $this->timestamp && $time_before < $this->timestamp) {			return true;		} else {			return false;		}	}	/**	 * 验证签名(api)	 * @param $prestr 需要签名的字符串	 * @param $sign 签名结果	 * @param $key 私钥	 * return 签名结果	 */	private function md5Verify() {		$sysParams = $this->getSysParams();		$sign = $this->generateSign($sysParams);		if($this->sign == $sign) {			return true;		}else {			return false;		}	}	/**	  *  Get system parameters	  *  @return array	  */	private function getSysParams(){		$sysParams = array();		$sysParams['app_key']     = $this->client_id;		$sysParams['v']                = $this->version;		$sysParams['format']        = $this->format;		$sysParams['signMethod'] = $this->signMethod;		$sysParams['method']       = $this->method;		$sysParams['timestamp']   = $this->timestamp;		$sysParams['fields']           = $this->fields;		return $sysParams;	}	/**	 * 验证签名(api)	 * @param $prestr 需要签名的字符串	 * @param $sign 签名结果	 * @param $key 私钥	 * return 签名结果	 */	private function generateSign($params){		ksort($params);		$m_model = $this->load('ApiClients');		$where = 'WHERE `client_id` = '.$this->client_id;		$client_secret = $m_model->SelectOne('client_secret', $where);		$string = $client_secret['client_secret'];		foreach ($params as $k => $v){			if('@' != substr($v, 0, 1)){				$string .= "$k$v";			}		}		unset($k, $v);		$string .= $client_secret['client_secret'] . APP_NAME;		return strtoupper(md5($string));	}	public function __call($name, $arguments){		return array();	}}?>